L√≥gica para la Gesti√≥n de Mensajes
1. Usuarios Mayores y Discapacitados
L√≠mite Mensual: Cada usuario mayor o discapacitado tiene 100 mensajes gratis al mes.
Renovaci√≥n Autom√°tica: El contador de mensajes se reinicia al inicio de cada mes.
Restricci√≥n de Mensajes: No pueden enviar m√°s de 100 mensajes, a menos que compren cr√©ditos adicionales (opcional).
2. Usuarios Regulares (De Pago)
Compra de Paquetes de Mensajes: Los usuarios pueden comprar paquetes de mensajes seg√∫n la siguiente tabla:

Paquete	Precio por Paquete	Precio por Mensaje
100 mensajes	10 ‚Ç¨	0.10 ‚Ç¨
200 mensajes	18 ‚Ç¨	0.09 ‚Ç¨
300 mensajes	24 ‚Ç¨	0.08 ‚Ç¨
400 mensajes	28 ‚Ç¨	0.07 ‚Ç¨
500 mensajes	30 ‚Ç¨	0.06 ‚Ç¨
Validaci√≥n de Cr√©ditos: Antes de enviar un mensaje, se verifica que el usuario tenga cr√©ditos suficientes.

Descuento Escalonado: A medida que compran m√°s mensajes, el precio unitario disminuye.

Implementaci√≥n Paso a Paso
1. Base de Datos
Tabla usuarios:

sql
Copiar c√≥digo
CREATE TABLE usuarios (
    id INT PRIMARY KEY,
    nombre VARCHAR(100),
    tipo_usuario ENUM('mayor', 'discapacitado', 'regular') NOT NULL,
    mensajes_disponibles INT DEFAULT 0,
    fecha_renovacion DATE
);
Tabla paquetes:

sql
Copiar c√≥digo
CREATE TABLE paquetes (
    id INT PRIMARY KEY,
    cantidad_mensajes INT,
    precio DECIMAL(5,2)
);
Tabla compras:

sql
Copiar c√≥digo
CREATE TABLE compras (
    id INT PRIMARY KEY,
    usuario_id INT,
    paquete_id INT,
    fecha_compra DATE,
    mensajes_agregados INT,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
    FOREIGN KEY (paquete_id) REFERENCES paquetes(id)
);
2. L√≥gica del Sistema
a) Renovaci√≥n Autom√°tica (Gratis para Mayores/Discapacitados)
python
Copiar c√≥digo
def renovar_mensajes_gratis():
    from datetime import datetime
    hoy = datetime.now().date()

    usuarios_gratis = Usuario.query.filter(
        Usuario.tipo_usuario.in_(['mayor', 'discapacitado']),
        Usuario.fecha_renovacion < hoy.replace(day=1)
    ).all()

    for usuario in usuarios_gratis:
        usuario.mensajes_disponibles = 100
        usuario.fecha_renovacion = hoy.replace(day=1)
    
    db.session.commit()
b) Compra de Paquetes (Usuarios Regulares)
python
Copiar c√≥digo
def comprar_paquete(usuario_id, paquete_id):
    usuario = Usuario.query.get(usuario_id)
    paquete = Paquete.query.get(paquete_id)

    if usuario and paquete:
        usuario.mensajes_disponibles += paquete.cantidad_mensajes
        compra = Compra(
            usuario_id=usuario.id,
            paquete_id=paquete.id,
            fecha_compra=datetime.now(),
            mensajes_agregados=paquete.cantidad_mensajes
        )
        db.session.add(compra)
        db.session.commit()
        return f"Compra exitosa: {paquete.cantidad_mensajes} mensajes agregados."
    else:
        return "Error: Usuario o paquete no v√°lido."
c) Verificar Cr√©ditos y Enviar Mensajes
python
Copiar c√≥digo
def enviar_mensaje(usuario_id, mensaje):
    usuario = Usuario.query.get(usuario_id)

    if usuario.mensajes_disponibles > 0:
        usuario.mensajes_disponibles -= 1
        # L√≥gica para enviar el mensaje (simulada aqu√≠)
        db.session.commit()
        return "Mensaje enviado correctamente."
    else:
        return "Error: No tienes cr√©ditos suficientes para enviar el mensaje."
3. Vista para Comprar Paquetes
Incluye una interfaz que muestre las opciones de paquetes y permita realizar compras.

¬øQuieres que trabajemos en implementar este c√≥digo en un archivo espec√≠fico o que preparemos un esquema m√°s detallado para el agente? üòä